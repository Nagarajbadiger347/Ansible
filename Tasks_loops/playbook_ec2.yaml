---
- hosts: all
  become: yes
  tasks:
   - name: instances
     community.aws.ec2_instance:
      region: "us-east-1"
      name: "server01"
      key_name: "server"
      instance_type: "t2.micro"
      image_id: "ami-024a64a6685d05041"
      network:
        assign_public_ip: yes
        private_ip_address: "192.168.61.11"

---
- hosts: all
  become: yes
  vars: 
    aws_instances:
    - ['server01','192.168.61.11','t2.micro']
    - ['server02','192.168.61.12','t2.medium']
    - ['server03','192.168.61.13','t3.micro']
  tasks:
   - name: instances
     community.aws.ec2_instance:
       region: "us-east-1"
       name: "{{ item[0] }}"
       key_name: "server"
       instance_type: "{{ item[2] }}"
       image_id: "ami-024a64a6685d05041"
       network:
         assign_public_ip: yes
         private_ip_address: "{{ item[1] }}"
     loop: "{{ aws_instances }}"


---
vars:
  aws_instances:
  - name: host01
    ip: 192.168.61.11
    instance_type: t2.micro
  - name: host02
    ip: 192.168.61.12
    instance_type: t2.medium
  - name: host03
    ip: 192.168.61.13
    instance_type: t3.micro
tasks:
  - name: instances
    community.aws.ec2_instance:
      region: "us-east-1"
      name: "{{ item['name'] }}"
      key_name: "server"
      instance_type: "{{ item['instance_type'] }}"
      image_id: "ami-024a64a6685d05041"
      network:
        assign_public_ip: yes
        private_ip_address: "{{ item['ip'] }}"
    loop: "{{ aws_instances }}"


--- # with dictionary
vars: 
  aws_instances:
    host01:
      ip: 192.168.61.11
      instance_type: t2.micro
      role: server
    host02:
      ip: 192.168.61.12
      instance_type: t2.medium
      role: client
    host03:
      ip: 192.168.61.13
      instance_type: t3.medium
tasks: 
  - name: instances
    community.aws.ec2_instance:
      region: "us-east-1"
      name: "{{ item.key }}"
      key_name: "server"
      instance_type: "{{ item.value.instance_type }}"
      image_id: "ami-024a64a6685d05041"
      network:
        assign_public_ip: yes
        private_ip_address: "{{ item.value.ip }}"
    loop: "{{ aws_instances|dict2items }}"
    
  - name: list role for each instances
    ansible.builtin.debug:
      msg: "Instance {{ item.key }} has role {{ item.value.role | ('client') }}"
    loop: "{{ aws_instances | dict2items  }}"

  - name: extract ip addresses:
    ansible.builtin.debug:
      msg: "{{ aws_instances.values() | map(attribute='ip') }}"

  - name: build a comma-separated list of ips
    ansible.builtin.debug:
      msg: "{{ aws_instances.values() |map(attribute='ip') | join(',') }}"

  - name: build a comma-separated list of micro machine ip addresses
    ansible.builtin.debug:
      msg: "{{ aws_instances.values() | selectattr('instance_type', 'eq', 't2.micro') | map(attribute='ip') | join(',') }}"
      